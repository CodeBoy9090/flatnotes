<Page
    x:Class="FlatNotes.Views.NoteEditPage"
    x:Name="Root"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="using:FlatNotes.Controls"
    xmlns:Converters="using:FlatNotes.Converters"
    xmlns:Models="using:FlatNotes.Models"
    mc:Ignorable="d"
    NavigationCacheMode="Required"
    Background="{x:Bind viewModel.Note.Color.Color, Mode=OneWay}"
    Foreground="{StaticResource AppNoteForegroundBrush}"
    FontSize="{StaticResource AppDefaultFontSize}"
    FontFamily="{StaticResource AppDefaultFontFamily}"
    d:DataContext="{d:DesignData /SampleData/NoteEditViewModelSampleData.xaml}">
    
    <Page.Resources>
        <ResourceDictionary>
            <Converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <Converters:FriendlyTimeConverter x:Key="FriendlyTimeConverter"/>
            <Converters:NullableToVisibilityConverter x:Key="NullableToVisibilityConverter"/>
            <Converters:NullableBooleanToBooleanConverter x:Key="NullableBooleanToBooleanConverter"/>
            <Converters:ReorderModeToVisibilityConverter x:Key="ReorderModeToVisibilityConverter"/>
            <Converters:ReorderModeToBooleanConverter x:Key="ReorderModeToBooleanConverter"/>
            <Converters:PositiveIntToVisibilityConverter x:Key="PositiveIntToVisibilityConverter"/>
            <Converters:ZoomFactorToScrollBarVisibilityConverter x:Key="ZoomFactorToScrollBarVisibilityConverter"/>
            <Converters:ZoomFactorToScrollModeConverter x:Key="ZoomFactorToScrollModeConverter"/>

            <DataTemplate x:Key="NoteChecklistListViewControlTemplate" x:DataType="Models:ChecklistItem">
                <Grid>
                    <Grid Margin="14,2">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <Viewbox Margin="0,3,0,0" Height="16" HorizontalAlignment="Center" VerticalAlignment="Top">
                            <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource CheckBoxWithoutContentStyle}" BorderBrush="{StaticResource AppNoteForegroundBrush}" Foreground="{StaticResource AppNoteForegroundBrush}" IsEnabled="{Binding ReorderMode, ElementName=NoteChecklistListView, Converter={StaticResource ReorderModeToBooleanConverter}, ConverterParameter=True}" ClickMode="Release" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                        </Viewbox>

                        <TextBox Grid.Column="1" Text="{Binding Text, Mode=TwoWay, TargetNullValue='', UpdateSourceTrigger=PropertyChanged}" MinHeight="24" Margin="0" Padding="8,0" Foreground="{StaticResource AppNoteForegroundBrush}" InputScope="Chat" Background="Transparent" BorderThickness="0" FontSize="{Binding FontSize, ElementName=Root}" FontWeight="SemiLight" FontFamily="{StaticResource NoteTextFontFamily}" AcceptsReturn="False" TextWrapping="NoWrap" IsEnabled="{Binding ReorderMode, ElementName=NoteChecklistListView, Converter={StaticResource ReorderModeToBooleanConverter}, ConverterParameter=True}" KeyDown="NoteChecklistItemTextBox_KeyDown" TextChanged="NoteChecklistItemTextBox_TextChanged" ScrollViewer.HorizontalScrollMode="Auto" ScrollViewer.VerticalScrollMode="Disabled"/>
                    </Grid>

                    <Grid Background="Transparent" Visibility="{Binding ReorderMode, ElementName=NoteChecklistListView, Converter={StaticResource ReorderModeToVisibilityConverter}}"/>
                </Grid>
            </DataTemplate>

            <MenuFlyout x:Name="NoteImageMenuFlyout" x:Key="NoteImageMenuFlyout" Placement="Bottom">
                <!--<MenuFlyoutItem x:Uid="SaveMenuFlyoutItem" Text="Save" IsEnabled="False"/>
                <MenuFlyoutItem x:Uid="ShareMenuFlyoutItem" Text="Share" IsEnabled="False"/>-->
                <MenuFlyoutItem x:Uid="DeleteMenuFlyoutItem" Text="Delete" Click="DeleteNoteImageMenuFlyoutItem_Click"/>
            </MenuFlyout>

            <DataTemplate x:Key="NoteImageControlTemplate" x:DataType="Models:NoteImage">
                <ScrollViewer 
                    ZoomMode="Enabled" MinZoomFactor="1" MaxZoomFactor="5" DoubleTapped="ScrollViewer_DoubleTapped"
                    HorizontalScrollMode="{Binding ZoomFactor, Converter={StaticResource ZoomFactorToScrollModeConverter}, Mode=OneWay, RelativeSource={RelativeSource Mode=Self}}" 
                    VerticalScrollMode="{Binding ZoomFactor, Converter={StaticResource ZoomFactorToScrollModeConverter}, Mode=OneWay, RelativeSource={RelativeSource Mode=Self}}" 
                    HorizontalScrollBarVisibility="{Binding ZoomFactor, Converter={StaticResource ZoomFactorToScrollBarVisibilityConverter}, Mode=OneWay, RelativeSource={RelativeSource Mode=Self}}" 
                    VerticalScrollBarVisibility="{Binding ZoomFactor, Converter={StaticResource ZoomFactorToScrollBarVisibilityConverter}, Mode=OneWay, RelativeSource={RelativeSource Mode=Self}}" 
                >
                    <Grid x:Name="NoteImageContainer" FlyoutBase.AttachedFlyout="{StaticResource NoteImageMenuFlyout}" Holding="NoteImageContainer_Holding" RightTapped="NoteImageContainer_RightTapped">
                        <Image MinHeight="220" MaxHeight="400" Source="{x:Bind URL}" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Stretch="UniformToFill" Opacity="0.15"/>
                        <Image MinHeight="220" MaxHeight="400" Source="{x:Bind URL}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform"/>
                    </Grid>
                </ScrollViewer>
            </DataTemplate>
        </ResourceDictionary>
    </Page.Resources>

    <Grid x:Name="LayoutRoot" Background="{x:Bind viewModel.Note.Color.Color, Mode=OneWay}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Grid.RowSpan="2" x:Name="ContentRoot">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <ScrollViewer Grid.Row="0" ScrollViewer.VerticalScrollMode="Enabled" ScrollViewer.HorizontalScrollMode="Disabled" ScrollViewer.VerticalScrollBarVisibility="Hidden">
                <StackPanel Padding="4">
                    <StackPanel.ChildrenTransitions>
                        <TransitionCollection>
                            <EntranceThemeTransition FromHorizontalOffset="0" FromVerticalOffset="10" IsStaggeringEnabled="True" />
                        </TransitionCollection>
                    </StackPanel.ChildrenTransitions>

                    <Grid Margin="-4,-4,-4,0" Background="{StaticResource PhoneDarkLowBrush}" Visibility="{x:Bind viewModel.Note.Images.Count, Mode=OneWay, Converter={StaticResource PositiveIntToVisibilityConverter}}">
                        <FlipView x:Name="NoteImagesFlipView" MaxHeight="400" ItemsSource="{Binding}" ItemTemplate="{StaticResource NoteImageControlTemplate}" DataContext="{x:Bind viewModel.Note.Images, Mode=OneWay}" d:DataContext="{Binding Images}" PointerWheelChanged="NoteImagesFlipView_PointerWheelChanged" Loaded="NoteImagesFlipView_Loaded" Unloaded="NoteImagesFlipView_Unloaded" />
                    </Grid>

                    <TextBox x:Uid="TitleTextBox" x:Name="NoteTitleTextBox" PlaceholderText="Title" Text="{Binding ElementName=Root, Path=viewModel.Note.Title, Mode=TwoWay, TargetNullValue='', UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource AppNoteForegroundBrush}" InputScope="Chat" Background="Transparent" BorderThickness="0" Margin="0" Padding="14" FontWeight="Bold" FontSize="16" FontFamily="{StaticResource NoteTitleFontFamily}" MaxLength="50" TextWrapping="NoWrap" KeyDown="NoteTitleTextBox_KeyDown" ScrollViewer.HorizontalScrollMode="Auto" ScrollViewer.VerticalScrollBarVisibility="Disabled"/>
                    <TextBox x:Uid="TextTextBox" x:Name="NoteTextTextBox" PlaceholderText="Text" Text="{Binding ElementName=Root, Path=viewModel.Note.Text, Mode=TwoWay, TargetNullValue='', UpdateSourceTrigger=PropertyChanged}" Foreground="{StaticResource AppNoteForegroundBrush}" InputScope="Chat" Background="Transparent" BorderThickness="0" Margin="0" Padding="14,4" FontWeight="SemiLight" FontSize="{x:Bind FontSize}" FontFamily="{StaticResource NoteTextFontFamily}" AcceptsReturn="True" TextWrapping="Wrap" Visibility="{x:Bind viewModel.Note.IsText, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" ScrollViewer.HorizontalScrollMode="Disabled" ScrollViewer.VerticalScrollMode="Disabled" />

                    <StackPanel Visibility="{x:Bind viewModel.Note.IsChecklist, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ListView x:Name="NoteChecklistListView" Margin="0" Padding="0" ItemsSource="{Binding}" ItemTemplate="{StaticResource NoteChecklistListViewControlTemplate}" SelectionMode="None" IsItemClickEnabled="True" CanReorderItems="True" CanDragItems="True" AllowDrop="True" Holding="NoteChecklistListView_Holding" ScrollViewer.HorizontalScrollMode="Disabled" ScrollViewer.VerticalScrollMode="Disabled" DataContext="{x:Bind viewModel.Note.Checklist, Mode=OneWay}" d:DataContext="{Binding Checklist}">
                            <ListView.ItemContainerTransitions>
                                <TransitionCollection>
                                    <EntranceThemeTransition FromHorizontalOffset="0" FromVerticalOffset="10" IsStaggeringEnabled="True" />
                                </TransitionCollection>
                            </ListView.ItemContainerTransitions>
                        </ListView>

                        <Grid Margin="14,2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Grid>
                                <Viewbox Margin="0,3,0,0" Height="16" HorizontalAlignment="Center" VerticalAlignment="Top" IsHitTestVisible="False" Opacity="0">
                                    <CheckBox Style="{StaticResource CheckBoxWithoutContentStyle}" IsEnabled="False" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                </Viewbox>

                                <Viewbox Margin="0,2,0,0" Width="14" HorizontalAlignment="Center" VerticalAlignment="Top" IsHitTestVisible="False">
                                    <SymbolIcon Symbol="Add" Foreground="{StaticResource PhoneDarkMidBrush}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                </Viewbox>
                            </Grid>

                            <TextBox Grid.Column="1" x:Uid="NewItemTextBox" x:Name="NewChecklistItemTextBox" PlaceholderText="New item" Text="" Margin="0" Padding="8,0" FontWeight="SemiLight" FontSize="{x:Bind FontSize}" FontFamily="{StaticResource NoteTextFontFamily}" Foreground="{StaticResource AppNoteForegroundBrush}" InputScope="Chat" Background="Transparent" BorderThickness="0" AcceptsReturn="False" TextWrapping="NoWrap" KeyDown="NewChecklistItemTextBox_KeyDown" IsEnabled="{Binding ReorderMode, ElementName=NoteChecklistListView, Converter={StaticResource ReorderModeToBooleanConverter}, ConverterParameter=True}" ScrollViewer.HorizontalScrollMode="Auto" ScrollViewer.VerticalScrollMode="Disabled" />
                        </Grid>
                    </StackPanel>
                </StackPanel>
            </ScrollViewer>

            <Grid Grid.Row="1" BorderThickness="0,1,0,0" BorderBrush="#0A000000">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <Grid Grid.Column="0" Visibility="{x:Bind viewModel.Note.Reminder, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}">
                    <Grid Margin="14,0" Visibility="{x:Bind viewModel.ReminderFormatedString, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}">
                        <StackPanel Orientation="Horizontal" Margin="0,8" VerticalAlignment="Center">
                            <Viewbox Height="14" Margin="0,0,4,0" VerticalAlignment="Center">
                                <SymbolIcon Symbol="Clock" Foreground="{StaticResource PhoneDarkMidBrush}"/>
                            </Viewbox>
                            <TextBlock Margin="0,0,4,0" Text="{x:Bind viewModel.ReminderFormatedString, Mode=OneWay}" Foreground="{StaticResource PhoneDarkMidBrush}" VerticalAlignment="Center"/>
                            <Button Margin="4,0" Padding="0" BorderThickness="0" Command="{x:Bind viewModel.RemoveNoteReminderCommand}" Foreground="{StaticResource PhoneDarkMidBrush}" VerticalAlignment="Center">
                                <Button.Resources>
                                    <SolidColorBrush x:Key="ButtonForegroundPointerOver" Color="#ea5f39"/>
                                    <SolidColorBrush x:Key="ButtonForegroundPressed" Color="#ea5f39"/>
                                </Button.Resources>

                                <Viewbox Height="12">
                                    <SymbolIcon Symbol="Delete"/>
                                </Viewbox>
                            </Button>
                        </StackPanel>
                    </Grid>
                </Grid>

                <ScrollViewer Grid.Column="2" MaxHeight="36" VerticalScrollBarVisibility="Auto">
                    <!-- Visibility="{x:Bind viewModel.Note.IsNewNote, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}"-->
                    <StackPanel Margin="14,0">
                        <StackPanel.ChildrenTransitions>
                            <TransitionCollection>
                                <EntranceThemeTransition FromHorizontalOffset="0" FromVerticalOffset="10" IsStaggeringEnabled="True" />
                            </TransitionCollection>
                        </StackPanel.ChildrenTransitions>

                        <Grid Visibility="{x:Bind viewModel.Note.IsArchived, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Grid Margin="0,8,0,0" Visibility="{x:Bind viewModel.Note.ArchivedAt, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Margin="0,0,8,0" Text="{x:Bind viewModel.ArchivedAtFormatedString, Mode=OneWay}" Foreground="{StaticResource PhoneDarkMidBrush}" TextAlignment="Right"/>

                                <TextBlock Grid.Column="1" Text="↓" Foreground="{StaticResource PhoneDarkMidBrush}"/>
                            </Grid>
                        </Grid>

                        <StackPanel Visibility="{x:Bind viewModel.Note.UpdatedAt, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}">
                            <Grid Margin="0,8,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>

                                <TextBlock Foreground="{StaticResource PhoneDarkMidBrush}" Margin="0,0,8,0" Text="{x:Bind viewModel.UpdatedAtFormatedString, Mode=OneWay}" Visibility="{x:Bind viewModel.Note.Changed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}" TextAlignment="Right"/>
                                <TextBlock x:Uid="PendingChangesTextBlock" Margin="0,0,8,0" Text="pending changes" FontStyle="Italic" Foreground="{StaticResource PhoneDarkMidBrush}" Visibility="{x:Bind viewModel.Note.Changed, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" TextAlignment="Right"/>

                                <TextBlock Grid.Column="1" Text="↓" Foreground="{StaticResource PhoneDarkMidBrush}" Visibility="{x:Bind viewModel.Note.CreatedAt, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}"/>
                            </Grid>

                            <TextBlock Margin="0,0,8,10" Text=" " Foreground="Transparent" Visibility="{x:Bind viewModel.Note.CreatedAt, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}, ConverterParameter=True}"/>
                        </StackPanel>

                        <TextBlock Margin="0,8,8,10" Foreground="{StaticResource PhoneDarkMidBrush}" Visibility="{x:Bind viewModel.Note.CreatedAt, Mode=OneWay, Converter={StaticResource NullableToVisibilityConverter}}" Text="{x:Bind viewModel.CreatedAtFormatedString, Mode=OneWay}" TextAlignment="Right"/>
                    </StackPanel>
                </ScrollViewer>
            </Grid>
        </Grid>

        <CommandBar x:Name="CommandBar" Grid.Row="2" Background="{x:Bind viewModel.Note.Color.Color, Mode=OneWay}" RequestedTheme="Light" HorizontalAlignment="Stretch">
            <CommandBar.PrimaryCommands>
                <AppBarButton x:Uid="ColorAppBarButton" x:Name="ColorPickerAppBarToggleButton" Label="Color" ToolTipService.ToolTip="{Binding Label, RelativeSource={RelativeSource Mode=Self}}">
                    <AppBarButton.Icon>
                        <FontIcon Glyph="&#xE2B1;"/>
                    </AppBarButton.Icon>

                    <AppBarButton.Flyout>
                        <Flyout>
                            <local:NoteColorPicker x:Name="NoteColorPicker" Background="{x:Bind viewModel.Note.Color.Color, Mode=OneWay}"/>
                        </Flyout>
                    </AppBarButton.Flyout>
                </AppBarButton>

                <AppBarButton x:Uid="PhotoAppBarButton" Icon="Camera" Label="Photo" Command="{x:Bind viewModel.OpenImagePickerCommand}" ToolTipService.ToolTip="{Binding Label, RelativeSource={RelativeSource Mode=Self}}"/>
                <!--<AppBarButton x:Uid="AudioAppBarButton" Icon="Microphone" Label="Audio" IsEnabled="False" ToolTipService.ToolTip="{Binding Label, RelativeSource={RelativeSource Mode=Self}}"/>-->
                <AppBarButton x:Name="TogglePinAppBarButton" Icon="Pin" Label="Pin to start" Command="{x:Bind viewModel.PinCommand}" IsEnabled="{x:Bind viewModel.IsNewNote, Mode=OneWay, Converter={StaticResource NullableBooleanToBooleanConverter}, ConverterParameter=True}" Visibility="{x:Bind viewModel.Note.IsArchived, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}" ToolTipService.ToolTip="{Binding Label, RelativeSource={RelativeSource Mode=Self}}"/>
                <AppBarButton x:Uid="ReminderAppBarButton" x:Name="ReminderAppBarButton" Icon="Clock" Label="Reminder" Visibility="{x:Bind viewModel.Note.IsArchived, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}" ToolTipService.ToolTip="{Binding Label, RelativeSource={RelativeSource Mode=Self}}">
                    <AppBarButton.Flyout>
                        <Flyout>
                            <local:ReminderPicker Reminder="{x:Bind viewModel.Note.Reminder, Mode=OneWay}" Saved="ReminderPicker_Saved" Canceled="ReminderPicker_Canceled" />
                        </Flyout>
                    </AppBarButton.Flyout>
                </AppBarButton>
            </CommandBar.PrimaryCommands>

            <CommandBar.SecondaryCommands>
                <AppBarButton x:Uid="ToggleChecklistAppBarButton" Label="Toggle checklist" Command="{x:Bind viewModel.ToggleChecklistCommand}" Icon="List" />
                <AppBarButton x:Uid="RestoreAppBarButton" Icon="Undo" Label="Restore" Command="{x:Bind viewModel.RestoreNoteCommand}" Visibility="{x:Bind viewModel.Note.IsArchived, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}" />
                <AppBarButton x:Uid="ArchiveAppBarButton" Icon="Remove" Label="Archive" Command="{x:Bind viewModel.ArchiveNoteCommand}" Visibility="{x:Bind viewModel.Note.IsArchived, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=True}" />
                <AppBarButton x:Uid="DeleteAppBarButton" Icon="Delete" Label="Delete" Command="{x:Bind viewModel.DeleteNoteCommand}" />
                <!--<AppBarButton x:Uid="ShareAppBarButton" Label="Share" IsEnabled="False">
                    <AppBarButton.Icon>
                        <FontIcon Glyph="&#xE72D;"/>
                    </AppBarButton.Icon>
                </AppBarButton>-->
            </CommandBar.SecondaryCommands>
        </CommandBar>
    </Grid>
</Page>
